/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package cl.marceloaros.nisumexercise;

import cl.marceloaros.nisumexercise.model.ApiErrorResponse;
import cl.marceloaros.nisumexercise.model.ApiSignInRequest;
import cl.marceloaros.nisumexercise.model.ApiSignInResponse;
import cl.marceloaros.nisumexercise.model.ApiSignUpRequest;
import cl.marceloaros.nisumexercise.model.ApiSignUpResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "auth", description = "Operations about authentication")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /auth/ingreso : User login
     *
     * @param apiSignInRequest  (required)
     * @return Ok (status code 200)
     */
    @Operation(
        operationId = "userSignIn",
        summary = "User login",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiSignInResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/ingreso",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ApiSignInResponse> userSignIn(
        @Parameter(name = "ApiSignInRequest", description = "", required = true) @Valid @RequestBody ApiSignInRequest apiSignInRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Fulgencio Rutherford\", \"token\" : \"header.payload.signature\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /auth/registro : Register a new user
     *
     * @param apiSignUpRequest  (required)
     * @return Successfully registered user (status code 201)
     *         or Invalid input (status code 400)
     *         or Invalid input (status code 405)
     *         or El correo ya registrado (status code 409)
     */
    @Operation(
        operationId = "userSignUp",
        summary = "Register a new user",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successfully registered user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiSignUpResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiErrorResponse.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input"),
            @ApiResponse(responseCode = "409", description = "El correo ya registrado")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/registro",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ApiSignUpResponse> userSignUp(
        @Parameter(name = "ApiSignUpRequest", description = "", required = true) @Valid @RequestBody ApiSignUpRequest apiSignUpRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"created\" : \"2017-07-21T17:32:28Z\", \"last_login\" : \"2017-07-21T17:32:28Z\", \"isactive\" : true, \"modified\" : \"2017-07-21T17:32:28Z\", \"uuid\" : \"2f89c0a7-78ba-4567-9e85-58dd650fff1f\", \"token\" : \"header.payload.signature\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"mensaje\" : \"mensaje de error\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
